Angular JS 1.0

SPA=>Single Page Application
-----------------------------
1.We need user experince similar to desktop application
2.We need to speed up the page loads and navigation for the user.
3.In short we need responsive Webapps , without constant page reloads.

What is ASP.NET SPA?
1.Get necessary code ->Html,CSS,Javascipt and initial page load.
2.Download appropriate features dynamically from server behind the scenes on response to user action,
3.Without reloading the complete page.
4.One of the best Examples of SPA are=>Gmail, Facebook.

Page life cycle =>SPA
--------                    -------------------
Client  |- Initial Request->|  Server			|
Get 	|                   |					|
Initial	|				    |					|
Data	|<--HTML Response--	|					|
		|					|					|
		|					|					|
		|---PostBack------->|Processing on		|
Updates	|					|Server				|
the page|					|					|
& Get	|<--HTML Response---|					|
More	|					|					|
Data	|					|					|
--------					---------------------

How to achive SPA?
its can be achived with help of Webbrowser and Javascipt But
it will be eaiser to implement SPA for Enterprise level application
by using Javascript Frameworks like Angular JS,KnockOutJS,Ember Js,
ExtJS ,React etc..

Why AngularJS?
1.We need a javascript framework that supports Single Page Application.
2.We need simple bidirectional data binding.
3.We need simple client side development and testing process.
4.We need a framework that support MV*(MVC,MVVM,etc).
5.We need a framework that keeps HTML and Javascript seperately.

Directives in Angular
In short! these are special attributes for HTML
elements

1.ng-app ->used to make part of page as angular part
2.ng-bind ->smiliar to expressions
3.ng-init ->For initilising variables with some values
4.ng-show ->For visibility
5.ng-hide ->For Visibility
6.ng-true-value ->used for checkboxes , if checked then true
7.ng-false-vale ->used for checkboxes , if not checked than false
8.ng-options -> used for dropdowns
9.ng-repeat -> similar to foreach loop
10.ng-model ->similar to ng-bind
11.ng-if -> similar to if
12.ng-controller ->
13.ng-view ->

Module 
We have various modules in our project like HR module, Admin Module etc.
Module is kind of namespace , so in each modue you have classes , in each module
we have controller , so we can consider controller as classes of module
It is a collection controllers , filters, directives and many more things
View is mapped to the module using ng-app directive

Defining Module
var app=angular.module('myApp',[]);
Mapping

<body ng-app="myApp">
---------------------
</body>

Controller 
In javascript a function is controller ,used to prepare data(Models) to be rendered on html pages(View).
Job of the controller is to bind model data to views using $scope.
It should not contain logic for curd operation.
I need a seperate user defined object which should perform CURD operations
and use it in the controller


//controller creation code
var app=angular.module('myApp',[]);
app.controller('adminController',function($scope)){

  ----------to do code---------
});

To map controller to view part we use ng-controller
<div ng-controlller="adminController"></div>

$scope
$scope is an object which holds the data(Model) and is used to bind
data between html pages(view) and controller

var app=angular.module('myApp',[]);
app.controller('adminController',function($scope)){

  $scope.myValue="Hello World";
});

<input type='text' na-model='myValue'/>

Controller's Methods

var app = angular.module("myApp", []);

app.controller("adminController", function ($scope) {
    $scope.myTestVariable = "hello World";
    $scope.myFunc = function () {
        alert("Welcome to the world of angular js"+$scope.myTestVariable);
    }
});

calling of function
{{myFunc}}
or
<input type="button" ng-click="myFunc()" value="click me" />

Passing arguments inside Function created inside controller

var app = angular.module("myApp", []);

app.controller("adminController", function ($scope) {
    $scope.myTestVariable = "hello World";
    $scope.myFunc = function () {
        alert("Welcome to the world of angular js"+$scope.myTestVariable);
    }
    
    $scope.myFunc2 = function (val) {
        alert("Welcome to the world of angular js" + val);
        $scope.myTestVariable = val;
    }
});

calling of function
{{myFunc}}
or
<input type="button" ng-click="myFunc('test')" value="click me" />

Making Server calls using $http
$http is one of the service by Angular js .It is used to make 
 Ajax Calls to the server.
 
 Making server Call
 app.controller("departmentController", function ($scope,$http) {
    $scope.getDepartments = function () {
        alert("In function");
        $http.get('/Home/GetDepartments').
        then(function (response) {
            $scope.deptData = response.data;
        });
    }
});

//displaying data
//1.  List Binding from Server
            <ul ng-repeat="dept in deptData">
                <li>DeptID:<span ng-bind="dept.DepartmentId"></span> DeptName:<span ng-bind="dept.DepartmentName"></span> </li>
            </ul>
//2.            DropDown Binding from Server
            <select ng-model="d" ng-options="dept.DepartmentId as dept.DepartmentName for dept in deptData"></select><br />
            Selected Value of dropdown :{{d}}<br />

 // 3.          Table binding from Server
            <table>
                <tr>
                    <td>Department ID</td>
                    <td>Department Name</td>
                  
                </tr>
                <tr ng-repeat="dept in deptData">
                    <td><span ng-bind="dept.DepartmentId"></span></td>
                    <td><span ng-bind="dept.DepartmentName"></span></td>
                </tr>
            </table><br />

4.Cascading DropDownlist  and Gridview from server
//In Js
app.controller("employeeController", function ($scope,$http) {
    $scope.getEmployees = function (dId) {
        $http.get('/Home/GetEmployeeByDeptId/'+dId).
            then(function (response) {
                $scope.EmpData = response.data;
            });
    }
});

//In HTML

 <div ng-controller="departmentController">
 <div ng-controller="employeeController">
                1st  DropDown Binding from Server
                <select ng-model="d" ng-change="getEmployees(d)"
                         ng-options="dept.DepartmentId as dept.DepartmentName for dept in deptData"></select><br />
                Selected Value of dropdown :{{d}}<br />
                CasCading 2nd DropDown List
                <select ng-model="e" ng-options="emp.EmployeeId as emp.EmployeeName for emp in EmpData"></select><br />
                <hr />
				Grid Binding
                <table class="table-striped" width="100%">
                    <tr>
                        <td>Eid</td>
                        <td>EName</td>
                        <td>ESalary</td>
                        <tr ng-repeat="emp in EmpData">
                            <td>{{emp.EmployeeId}}</td>
                            <td>{{emp.EmployeeName}}</td>
                            <td>{{emp.EmployeeSalary}}</td>
                    </tr>
                </table>
	</div>
	</div>

	//Server
	 public ActionResult GetDepartments()
        {
            EmployeedatabaseEntities objEmp = new EmployeedatabaseEntities();
            var depts = objEmp.Departments.ToList();
            return Json(depts,JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetEmployees()
        {
            EmployeedatabaseEntities objEmp = new EmployeedatabaseEntities();
            var Emps = objEmp.Employees.ToList();
            return Json(Emps, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetEmployeeByDeptId(int id)
        {
            EmployeedatabaseEntities objEmp = new EmployeedatabaseEntities();
            var Emps = objEmp.Employees.Where(emp => emp.Department_DepartmentId == id).ToList();
            return Json(Emps, JsonRequestBehavior.AllowGet);
        }

Filters
Filters are the special functions to format or transfrom the data using pipe 
character in an expression followed by a filter.{{model | filter}}

1.lowercase Format a string to lowercase.
2.uppercase Format a string to uppercase.
3.currency Format a number to a currency format.
4.number Format a number to string.
5.date Format a date to a specified format.
6.json Format an object to a Json string.
7.Serching filter ->filter Select a subset of items from an array.
8.orderBy Orders an array by an expression -Sorting
9.Third party dirPaginate.js - Pagination

Serching and Sorting 
//html
 <div ng-controller="employeeController">
 Search: <input type="text" ng-model="search" value="" />
                <table class="table-hover" width="100%">
                    <tr>
                        <td style="cursor:pointer;" ng-click="sort('EmployeeId')">Eid</td>
                        <td style="cursor:pointer;"ng-click="sort('EmployeeName')">EName</td>
                        <td style="cursor:pointer;"ng-click="sort('EmployeeSalary')">ESalary</td>
                        <td style="cursor:pointer;"ng-click="sort('Gender')">EGender</td>
                        <td style="cursor:pointer;"ng-click="sort('Department_DepartmentId')">EDepartment</td>
                    <tr ng-repeat="emp in EmpData | filter:search | orderBy:sortColumnKey:ascOrDesc">
                        <td>{{emp.EmployeeId}}</td>
                        <td>{{emp.EmployeeName | uppercase}}</td>
                        <td>{{emp.EmployeeSalary}}</td>
                        <td>
                            <input type="radio" ng-model="emp.Gender" value="M" />Male
                            <input type="radio" ng-model="emp.Gender" value="F" />FeMale

                        </td>
                        <td>
                            <select ng-model="emp.Department_DepartmentId" 
                                    ng-options="dept.DepartmentId as dept.DepartmentName for dept in deptData"></select>
                        </td>
                    </tr>
                </table>
				</div>


//in js
app.controller("employeeController", function ($scope,$http) {
   
   //for sorting
    $scope.sort = function (colName) {
        $scope.sortColumnKey = colName;
        $scope.ascOrDesc = !$scope.ascOrDesc;
    }
});

Paging using dirPagination.js Plug-inn

In Html
<table class="table-hover" width="100%">
                    <tr>
                        <td style="cursor:pointer;" ng-click="sort('EmployeeId')">Eid</td>
                        <td style="cursor:pointer;"ng-click="sort('EmployeeName')">EName</td>
                        <td style="cursor:pointer;"ng-click="sort('EmployeeSalary')">ESalary</td>
                        <td style="cursor:pointer;"ng-click="sort('Gender')">EGender</td>
                        <td style="cursor:pointer;"ng-click="sort('Department_DepartmentId')">EDepartment</td>
                   <!-- <tr ng-repeat="emp in EmpData | filter:search | orderBy:sortColumnKey:ascOrDesc">-->
                    <tr dir-paginate="emp in EmpData | filter:search | orderBy:sortColumnKey:ascOrDesc |itemsPerPage:3">
                        <td>{{emp.EmployeeId}}</td>
                        <td>{{emp.EmployeeName | uppercase}}</td>
                        <td>{{emp.EmployeeSalary}}</td>
                        <td>
                            <input type="radio" ng-model="emp.Gender" value="M" />Male
                            <input type="radio" ng-model="emp.Gender" value="F" />FeMale

                        </td>
                        <td>
                            <select ng-model="emp.Department_DepartmentId"
                                    ng-options="dept.DepartmentId as dept.DepartmentName for dept in deptData"></select>
                        </td>
                    </tr>
                </table>
               <dir-pagination-controls max-size="3"
                                        direction-links="true"
                                        boundary-links="true">
               </dir-pagination-controls>

//In JS
//adding the dependency for the pluginn
var app = angular.module("myApp", ['angularUtils.directives.dirPagination']);

Services
Service is an object which contains some functions which perform some
operations.
Eg:$http is a predefined service object.
We can write user defined service objects to perform CURD operations.
Invoke these services from any controllers.
Sevices can be created using 
	1.Service Method 
	2.Factory Method

//js
app.service('MyService',function(){

	this.func1=function(){
	   -------------
	};
});


























