Angular JS 1.0

SPA=>Single Page Application
-----------------------------
1.We need user experince similar to desktop application
2.We need to speed up the page loads and navigation for the user.
3.In short we need responsive Webapps , without constant page reloads.

What is ASP.NET SPA?
1.Get necessary code ->Html,CSS,Javascipt and initial page load.
2.Download appropriate features dynamically from server behind the scenes on response to user action,
3.Without reloading the complete page.
4.One of the best Examples of SPA are=>Gmail, Facebook.

Page life cycle =>SPA
--------                    -------------------
Client  |- Initial Request->|  Server			|
Get 	|                   |					|
Initial	|				    |					|
Data	|<--HTML Response--	|					|
		|					|					|
		|					|					|
		|---PostBack------->|Processing on		|
Updates	|					|Server				|
the page|					|					|
& Get	|<--HTML Response---|					|
More	|					|					|
Data	|					|					|
--------					---------------------

How to achive SPA?
its can be achived with help of Webbrowser and Javascipt But
it will be eaiser to implement SPA for Enterprise level application
by using Javascript Frameworks like Angular JS,KnockOutJS,Ember Js,
ExtJS ,React etc..

Why AngularJS?
1.We need a javascript framework that supports Single Page Application.
2.We need simple bidirectional data binding.
3.We need simple client side development and testing process.
4.We need a framework that support MV*(MVC,MVVM,etc).
5.We need a framework that keeps HTML and Javascript seperately.

Directives in Angular
In short! these are special attributes for HTML
elements

1.ng-app ->used to make part of page as angular part
2.ng-bind ->smiliar to expressions
3.ng-init ->For initilising variables with some values
4.ng-show ->For visibility
5.ng-hide ->For Visibility
6.ng-true-value ->used for checkboxes , if checked then true
7.ng-false-vale ->used for checkboxes , if not checked than false
8.ng-options -> used for dropdowns
9.ng-repeat -> similar to foreach loop
10.ng-model ->similar to ng-bind
11.ng-if -> similar to if
12.ng-controller ->
13.ng-view ->

Module 
We have various modules in our project like HR module, Admin Module etc.
Module is kind of namespace , so in each modue you have classes , in each module
we have controller , so we can consider controller as classes of module
It is a collection controllers , filters, directives and many more things
View is mapped to the module using ng-app directive

Defining Module
var app=angular.module('myApp',[]);
Mapping

<body ng-app="myApp">
---------------------
</body>

Controller 
In javascript a function is controller ,used to prepare data(Models) to be rendered on html pages(View).
Job of the controller is to bind model data to views using $scope.
It should not contain logic for curd operation.
I need a seperate user defined object which should perform CURD operations
and use it in the controller


//controller creation code
var app=angular.module('myApp',[]);
app.controller('adminController',function($scope)){

  ----------to do code---------
});

To map controller to view part we use ng-controller
<div ng-controlller="adminController"></div>

$scope
$scope is an object which holds the data(Model) and is used to bind
data between html pages(view) and controller

var app=angular.module('myApp',[]);
app.controller('adminController',function($scope)){

  $scope.myValue="Hello World";
});

<input type='text' na-model='myValue'/>

Controller's Methods

var app = angular.module("myApp", []);

app.controller("adminController", function ($scope) {
    $scope.myTestVariable = "hello World";
    $scope.myFunc = function () {
        alert("Welcome to the world of angular js"+$scope.myTestVariable);
    }
});

calling of function
{{myFunc}}
or
<input type="button" ng-click="myFunc()" value="click me" />

Passing arguments inside Function created inside controller

var app = angular.module("myApp", []);

app.controller("adminController", function ($scope) {
    $scope.myTestVariable = "hello World";
    $scope.myFunc = function () {
        alert("Welcome to the world of angular js"+$scope.myTestVariable);
    }
    
    $scope.myFunc2 = function (val) {
        alert("Welcome to the world of angular js" + val);
        $scope.myTestVariable = val;
    }
});

calling of function
{{myFunc}}
or
<input type="button" ng-click="myFunc('test')" value="click me" />

Making Server calls using $http
$http is one of the service by Angular js .It is used to make 
 Ajax Calls to the server.
 
 Making server Call
 app.controller("departmentController", function ($scope,$http) {
    $scope.getDepartments = function () {
        alert("In function");
        $http.get('/Home/GetDepartments').
        then(function (response) {
            $scope.deptData = response.data;
        });
    }
});

//displaying data
//1.  List Binding from Server
            <ul ng-repeat="dept in deptData">
                <li>DeptID:<span ng-bind="dept.DepartmentId"></span> DeptName:<span ng-bind="dept.DepartmentName"></span> </li>
            </ul>
//2.            DropDown Binding from Server
            <select ng-model="d" ng-options="dept.DepartmentId as dept.DepartmentName for dept in deptData"></select><br />
            Selected Value of dropdown :{{d}}<br />

 // 3.          Table binding from Server
            <table>
                <tr>
                    <td>Department ID</td>
                    <td>Department Name</td>
                  
                </tr>
                <tr ng-repeat="dept in deptData">
                    <td><span ng-bind="dept.DepartmentId"></span></td>
                    <td><span ng-bind="dept.DepartmentName"></span></td>
                </tr>
            </table><br />

4.Cascading DropDownlist  and Gridview from server
//In Js
app.controller("employeeController", function ($scope,$http) {
    $scope.getEmployees = function (dId) {
        $http.get('/Home/GetEmployeeByDeptId/'+dId).
            then(function (response) {
                $scope.EmpData = response.data;
            });
    }
});

//In HTML

 <div ng-controller="departmentController">
 <div ng-controller="employeeController">
                1st  DropDown Binding from Server
                <select ng-model="d" ng-change="getEmployees(d)"
                         ng-options="dept.DepartmentId as dept.DepartmentName for dept in deptData"></select><br />
                Selected Value of dropdown :{{d}}<br />
                CasCading 2nd DropDown List
                <select ng-model="e" ng-options="emp.EmployeeId as emp.EmployeeName for emp in EmpData"></select><br />
                <hr />
				Grid Binding
                <table class="table-striped" width="100%">
                    <tr>
                        <td>Eid</td>
                        <td>EName</td>
                        <td>ESalary</td>
                        <tr ng-repeat="emp in EmpData">
                            <td>{{emp.EmployeeId}}</td>
                            <td>{{emp.EmployeeName}}</td>
                            <td>{{emp.EmployeeSalary}}</td>
                    </tr>
                </table>
	</div>
	</div>

	//Server
	 public ActionResult GetDepartments()
        {
            EmployeedatabaseEntities objEmp = new EmployeedatabaseEntities();
            var depts = objEmp.Departments.ToList();
            return Json(depts,JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetEmployees()
        {
            EmployeedatabaseEntities objEmp = new EmployeedatabaseEntities();
            var Emps = objEmp.Employees.ToList();
            return Json(Emps, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetEmployeeByDeptId(int id)
        {
            EmployeedatabaseEntities objEmp = new EmployeedatabaseEntities();
            var Emps = objEmp.Employees.Where(emp => emp.Department_DepartmentId == id).ToList();
            return Json(Emps, JsonRequestBehavior.AllowGet);
        }

Filters
Filters are the special functions to format or transfrom the data using pipe 
character in an expression followed by a filter.{{model | filter}}

1.lowercase Format a string to lowercase.
2.uppercase Format a string to uppercase.
3.currency Format a number to a currency format.
4.number Format a number to string.
5.date Format a date to a specified format.
6.json Format an object to a Json string.
7.Serching filter ->filter Select a subset of items from an array.
8.orderBy Orders an array by an expression -Sorting
9.Third party dirPaginate.js - Pagination

Serching and Sorting 
//html
 <div ng-controller="employeeController">
 Search: <input type="text" ng-model="search" value="" />
                <table class="table-hover" width="100%">
                    <tr>
                        <td style="cursor:pointer;" ng-click="sort('EmployeeId')">Eid</td>
                        <td style="cursor:pointer;"ng-click="sort('EmployeeName')">EName</td>
                        <td style="cursor:pointer;"ng-click="sort('EmployeeSalary')">ESalary</td>
                        <td style="cursor:pointer;"ng-click="sort('Gender')">EGender</td>
                        <td style="cursor:pointer;"ng-click="sort('Department_DepartmentId')">EDepartment</td>
                    <tr ng-repeat="emp in EmpData | filter:search | orderBy:sortColumnKey:ascOrDesc">
                        <td>{{emp.EmployeeId}}</td>
                        <td>{{emp.EmployeeName | uppercase}}</td>
                        <td>{{emp.EmployeeSalary}}</td>
                        <td>
                            <input type="radio" ng-model="emp.Gender" value="M" />Male
                            <input type="radio" ng-model="emp.Gender" value="F" />FeMale

                        </td>
                        <td>
                            <select ng-model="emp.Department_DepartmentId" 
                                    ng-options="dept.DepartmentId as dept.DepartmentName for dept in deptData"></select>
                        </td>
                    </tr>
                </table>
				</div>


//in js
app.controller("employeeController", function ($scope,$http) {
   
   //for sorting
    $scope.sort = function (colName) {
        $scope.sortColumnKey = colName;
        $scope.ascOrDesc = !$scope.ascOrDesc;
    }
});

Paging using dirPagination.js Plug-inn

In Html
<table class="table-hover" width="100%">
                    <tr>
                        <td style="cursor:pointer;" ng-click="sort('EmployeeId')">Eid</td>
                        <td style="cursor:pointer;"ng-click="sort('EmployeeName')">EName</td>
                        <td style="cursor:pointer;"ng-click="sort('EmployeeSalary')">ESalary</td>
                        <td style="cursor:pointer;"ng-click="sort('Gender')">EGender</td>
                        <td style="cursor:pointer;"ng-click="sort('Department_DepartmentId')">EDepartment</td>
                   <!-- <tr ng-repeat="emp in EmpData | filter:search | orderBy:sortColumnKey:ascOrDesc">-->
                    <tr dir-paginate="emp in EmpData | filter:search | orderBy:sortColumnKey:ascOrDesc |itemsPerPage:3">
                        <td>{{emp.EmployeeId}}</td>
                        <td>{{emp.EmployeeName | uppercase}}</td>
                        <td>{{emp.EmployeeSalary}}</td>
                        <td>
                            <input type="radio" ng-model="emp.Gender" value="M" />Male
                            <input type="radio" ng-model="emp.Gender" value="F" />FeMale

                        </td>
                        <td>
                            <select ng-model="emp.Department_DepartmentId"
                                    ng-options="dept.DepartmentId as dept.DepartmentName for dept in deptData"></select>
                        </td>
                    </tr>
                </table>
               <dir-pagination-controls max-size="3"
                                        direction-links="true"
                                        boundary-links="true">
               </dir-pagination-controls>

//In JS
//adding the dependency for the pluginn
var app = angular.module("myApp", ['angularUtils.directives.dirPagination']);

Services
Service is an object which contains some functions which perform some
operations.Services are singleton means only one instance of service exsits
Eg:$http is a predefined service object.
We can write user defined service objects to perform CURD operations.
Invoke these services from any controllers.
Sevices can be created using 
	1.Service Method 
	2.Factory Method
	3.Providers

Before understanding services we need to understand the concepts of 
1.IOC(Inversion of Control) IOC is a principle which says the I as a object will perform my activites only 
and I will not create an object (coz its not my responsibility) And will delegate this responsibilty to other
So IOC is a princliple and it is implemented by DI implements IOC
2.DI(Dependency Injection) Dependency Injection helps to inject dependent objects of a code ,it basically
helps us to decouple system and create a decoupled architecture

We have basically 2 types of classes in our system
1.Domain Clasess (Business classes) =>Maps to real world object
2.Utility classes(Infrastructure classes) =>Common code for our project

Note:Global instance means single instance makes sense for utilty classes
     BUT for domain objects we would need different instances


Service Method
-----------------
Services are used to create utility objects in an application that can be shared across application
ie.Basically its a singleton design pattern where only one instance of object exixts 

Factory Method
-------------------
Factory is resposponisble for creating objects , in case of factory instances are not injected
and a javascript object is passed to the controller


//js Service Method 
app.service('MyService',function(){

	this.func1=function(){
	   -------------
	};
});

//Example
var app = angular.module("MyApp", []);

app.service("$calculateService", function () {
    this.add = function (value1, value2) {
        return parseInt(value1) + parseInt(value2);
    };
    this.subtract = function (value1, value2) {
        return value1 - value2
    };

});
//Consuming Service
app.controller('MathController', function ($scope, $calculateService) {
    $scope.add = function (a, b) {
        $scope.result = $calculateService.add(a, b);
       // alert($scope.result);
    };

});

//Creating Service using Factory Method
app.factory("$calculateServiceUsingFactoryMethod", function () {
    var fact = {};
    fact.add = function (value1, value2) {
        return parseInt(value1) + parseInt(value2);
    };
    fact.subtract = function (value1, value2) {
        return value1 - value2
    };
    return fact;

});

//Creating Provider
app.provider("date", function () {
    var greet;
    return {
	//this below method will only be acessable in config  and not in controller
	//coz it is not under $get 
        setGreetMessage:function(greetValue){
            greet = greetValue;
            console.log(greet);
        },
        $get: function () {
            return {
                showDate: function () {
                    var date = new Date();
                    return "Hi "+greet+" time is"+  date.getHours();
                }
            }
        }
    }
});

//Consuming service and provider
app.controller('MathController', function ($scope, $calculateServiceUsingServiceMethod, $calculateServiceUsingFactoryMethod,date) {
    $scope.add = function (a, b) {
        $scope.result = $calculateServiceUsingServiceMethod.add(a, b);
       // alert($scope.result);
    };

    $scope.sub = function (a, b) {
        $scope.result = $calculateServiceUsingFactoryMethod.subtract(a, b);
        // alert($scope.result);
    };

    $scope.currentDate = date.showDate();

});

//acessing provider method in app.config
//here date which is a provider will be acessible as dateProvider(Provider is a suffix)
app.config(function (dateProvider) {
    var time=dateProvider.$get().showDate();
    if (time > 0 && time < 12) {
        dateProvider.setGreetMessage("Good morning");
    } else {
        dateProvider.setGreetMessage("Good night");
    }
});



//Digest Cycle
Q.Basically the question is how Angular is working and updating the expression
Q.How model is going and updating the expression 
So, basically the answer to the above questions is the updation is done through 
the digest cycle , digest cycle is a loop which runs and upates the changes

Q.When does digest cycle runs and how does digest cycle know which expressions to update
A. So the first thing to understand is that digest cycle does not continously runs at the 
back to update things , it runs when some kind of event that is send from the angular like
onChange event, keypress event etc. 
So mainly watchers which  are attached to the models and it goes to all the watchers and it updates
the corresponding model is updated

Model ====> $.apply() ====> $.digest()

So, when event occurs $.apply() method is called and singnals out to start the digest
cycle and then $.digest is loop which updates the watchers 

More things to add is that , digest cycle does not run once but it runs twice(Minimum) or many times

Running digest cycle twice is termed as dirty checking , dirty cheking is done to check if there are
any left over changes needed to be updated 

Full digest Cycle steps :

Model ===event occurs===>$.apply() =====>$.digest() ====>all Watechers evaluted ====> Dom painting ====> Browser displays Updated

Note:Before running the digest cycle angular compare the old Value with new value and if both
the values are same then it does nothing

Perfomance Implications 
If there are too many watchers in our form the it may effect the performance of our application
So, to solve the above issue we can take below measures...
1.Remove Unnecessary watchers
2.We can use one time watchers by using :: => {{::Datetime}}


Handling Cross Issue in Angular
-------------------------------------
Problem :Basically the Cross issue occuers when the client Application(Angular Application) 
and Server Application(Web API) and on different domains 
Solution:We need to enable cross domain on server Application(Web API)

For this Firstly we need to add coniguration to webConfig file of our project
<httpProtocol>
	<customHeaders>
		<add name="Access-Control-Allow-Origin" value="*" />
		<add name="Access-Control-Allow-Headers" value="Content-Type" />
		<add name="Access-Control-Allow-Methods" value="GET,POST,PUT,DELETE,OPTIONS" />
	</customHeaders>
</httpProtocol>

Secondly , in Global.asax we write below code in Application_BeginRequest() method

Protected void Application_BeginRequest(){
	if(Request.Headers.AllKeys.Contains("Origin") && Request.HttpMethod=="OPTIONS"){
		Response.Flush();
	}
}



In Cross domain call ,there is one more call is added called as preflight call and asks server
what options are available on your server and server responds that I have enabled GET, PUT,POST etc.
(which ever are meintioned in webconfig File ) so depending upon these options client sends the request(GET ,POST)
to server , so in case of Cross there is an extra call to the server called as Pre-Flight call to get the
options from the server and after the actual call is send to the server 


Note: Client cannot do anything in case of Cross issue and server needs to give permisssion 
      ie.Enable Cross 



























